# -*- coding: utf-8 -*-
"""Churn_Modelling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1atJIODtTmimWolPzURNU4A3UT6Qu89j6
"""



"""# New Section"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import tensorflow
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout

data=pd.read_csv("/content/Churn_Modelling.csv")
data.head()

data.info()

x=data.iloc[:,3:13]
y=data.iloc[:,13]

geography=pd.get_dummies(x['Geography'],drop_first=True)
gender=pd.get_dummies(x['Gender'],drop_first=True)

X=pd.concat([x,geography,gender], axis=1)
X.drop(columns=['Geography','Gender'],inplace= True)
X

## split data into train and test data
X_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.7,random_state=101)

#Creating a neural network structure

model=Sequential()

#adding first hidden layer
model.add(Dense(100,activation='relu' ))
model.add(Dropout(0.2))
#adding second hidden layer
model.add(Dense(70,activation='sigmoid',kernel_initializer='glorot_uniform' ))
model.add(Dropout(0.5))
#adding third hidden layer
model.add(Dense(50,activation='relu'))
model.add(Dropout(0.3))
#adding output layer
model.add(Dense(1,activation='sigmoid'))

model.compile(optimizer='SGD',loss='binary_crossentropy',metrics='accuracy')

history=model.fit(X_train,y_train,batch_size=32,epochs=50,validation_split=0.2)

import matplotlib.pyplot as plt

#Summarize history for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(['train','test'],loc='upper left')
plt.show()

#summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.xlabel('epoch')
plt.ylabel('loss')
plt.legend(['train','test'],loc='upper left')
plt.show()

y_pred=model.predict(X_test)
y_pred

Y_pred=(y_pred>0.5)
Y_pred

y_test

from sklearn.metrics import accuracy_score

score=accuracy_score(Y_pred,y_test)
score

model.save("chrun_modelling.h5")

from tensorflow.keras import models

test_model=models.load_model('chrun_modelling.h5')

X_test.columns

test_model.predict([[1.2,32,5,120000,3,1,1,3200000,0,1,0]])




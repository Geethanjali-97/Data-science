# -*- coding: utf-8 -*-
"""Cat_Dog.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ewr7Cie1cI1R2Z5rkk_71vlmv095H0mz
"""

from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %ls

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Learnbay

# Commented out IPython magic to ensure Python compatibility.
# %ls

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPool2D
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import models

pip install split-folders

import splitfolders
splitfolders.ratio('/content/drive/MyDrive/Learnbay/Dog and Cat .png',#input root folder
                   output='/content/drive/MyDrive/Learnbay/ctgd',#target folder
                   ratio=(0.8,0.2) # splitting data into training and testing
                   )

#define all parameters

training_path='/content/drive/MyDrive/Learnbay/ctgd/train'
testing_path='/content/drive/MyDrive/Learnbay/ctgd/val'
BATCH_SIZE=32
EPOCHS=10
OPTIMIZERS='adam'

#Data agumentation generating more images
train_datagen=ImageDataGenerator(
                               rescale=1./255,
                               shear_range=0.2, #Rotate image by an angle
                               zoom_range=0.2,
                               horizontal_flip=True,
                               )
test_datagen=ImageDataGenerator(
                                 rescale=1./255,
                               )

#giving the data for augmentation
training_set=train_datagen.flow_from_directory(
                                             training_path,
                                             target_size=(64,64), #can be done to anysize
                                             batch_size=BATCH_SIZE,
                                             class_mode='binary'
                                             )
testing_set=test_datagen.flow_from_directory(
                                             testing_path,
                                             target_size=(64,64) ,#can be done to anysize
                                             batch_size=BATCH_SIZE,
                                             class_mode='binary'
                                             )

training_set

trainig_data=next(training_set)
test_data=next(testing_set)

trainig_data[0].shape

trainig_data[1][1]

training_set.class_indices

classifier=Sequential()

#1st Convolution layer
classifier.add(Conv2D(32,(3,3),activation='relu'))
classifier.add(MaxPool2D())

#2nd Convolution layer
classifier.add(Conv2D(64,(3,3),activation='relu'))
classifier.add(MaxPool2D())

classifier.add(Flatten())
classifier.add(Dense(128,activation='relu'))
classifier.add(Dense(1,activation='sigmoid'))

classifier.compile(optimizer=OPTIMIZERS,loss='binary_crossentropy',metrics=['accuracy'])

classifier.fit(training_set,epochs=EPOCHS)

classifier.save('/content/drive/MyDrive/Learnbay/Cat_Dog.h5')

predict=classifier.predict(testing_set)

testing_path='/content/drive/MyDrive/Learnbay/dog.jpg'

test_image=image.load_img(testing_path,target_size=(64,64))
test_image=image.img_to_array(test_image)
test_image=test_image.reshape(1,64,64,3)

result=classifier.predict(test_image)
if result[0][0] ==1:
  print('Dog')
else:
  print('Cat')